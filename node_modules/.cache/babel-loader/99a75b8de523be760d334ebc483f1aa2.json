{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jiasui Wang\\\\OneDrive\\\\\\u684C\\u9762\\\\react-typescript\\\\src\\\\components\\\\Statististics\\\\index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { useEffect } from \"react\"; //把整个css文件引入过来，当作一个style（相当于dom）        import \"./index.css\"\n\n/* JS中的import 代替了HTML中的<link rel=\"stylesheet\" href=\"styles.css\"></link> */\n//因为import './index.css'会导致全局样式的样式冲突问题，为了避免，所以使用module.css\n//原理：为每一个css都创建一个随机字符串来保证class的唯一性\n//1.在一个element下面，\n// 每一个attribute都占用一个代码块，\n// =左右两边不需要空格，\n// attributes之间不需要逗号\n\n/**2.REACT JS中CSS的写法用两个大括号来写\r\n * 子的attribute每个占用一行\r\n * key: value的形式，左边有空格，右边有空格\r\n * 子的attributes之间用逗号\r\n */\n// let nectar:number = 100;\n// let honey:number = 100;\n// let amountBee:number = 9;\n// let amountFuelOverSixty = 4;\n// let amountStateOverSixty = 3;\n// 好的页面结构：\n// 1.在Statistics function之前可以写定义好的常量\n// 2.在Statistics代码块里面\n//     1.写useState方法来定义变量\n//     2.定义API\n//     3.写好useEffect定义好监听函数\n//     4.写return里面的div\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Statistics = () => {\n  _s();\n\n  //\n  const [nectar, setNectar] = useState(100);\n  const [honey] = useState(100);\n  const [amountBee] = useState(9);\n  const [amountFuelOverSixty] = useState(4);\n  const [amountStateOverSixty] = useState(3); //evenlistner (本质是一个callback函数)\n\n  const runStatisticeAPI = () => {\n    console.log(\"hello world\");\n  };\n\n  useEffect(runStatisticeAPI, []); //如果这个地方不传入参数的话，相当于页面初始化的时候执行，且仅执行一次\n  //什么时候统计的表单会刷新\n  //1.新增，修改，删除的时候，统计数据\n  //2.当打开页面的时候统计数据需要刷新-useEffect，监听参数为空\n  // useEffect(() => {\n  //     const fetch = () => {\n  //         //做请求\n  //         console.log(\"请求数据\")\n  //     }\n  //     fetch();\n  // }, [])\n\n  return (\n    /*#__PURE__*/\n    //JSX Element里面声明变量必须用一层大括号给包裹起来，对于object，Ts的语法依然是一层大括号，里面的元素用逗号分隔\n    _jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: /*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"Statistics\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 16\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setNectar(Math.random()),\n          children: \"\\u70B9\\u51FB\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"\\u5171\\u6536\\u96C6\\u8702\\u871C, nectar = \", nectar]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"\\u5171\\u751F\\u4EA7\\u8702\\u871C, honey = \", honey]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"\\u603B\\u8F6C\\u5316\\u7387,tansformation = \", honey / nectar]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"\\u871C\\u8702\\u6570\\u91CF,amountBee = \", amountBee]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"\\u71C3\\u6599\\u5927\\u4E8E60%, amountFuelOverSixty = \", amountFuelOverSixty]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"\\u72B6\\u6001\\u5927\\u4E8E60%, amountStateOverSixty = \", amountStateOverSixty]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this)\n  );\n};\n\n_s(Statistics, \"fYh7jsu9cuj1q1UkAbzdKnOelnk=\");\n\n_c = Statistics;\nexport default Statistics;\n\nvar _c;\n\n$RefreshReg$(_c, \"Statistics\");","map":{"version":3,"sources":["C:/Users/Jiasui Wang/OneDrive/桌面/react-typescript/src/components/Statististics/index.tsx"],"names":["React","useState","useEffect","Statistics","nectar","setNectar","honey","amountBee","amountFuelOverSixty","amountStateOverSixty","runStatisticeAPI","console","log","Math","random"],"mappings":";;;AAAA,OAAOA,KAAP,IAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,SAAT,QAA0B,OAA1B,C,CACA;;AACA;AACA;AACA;AAGA;AACI;AACA;AACA;;AAEJ;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAEA,MAAMC,UAAU,GAAG,MAAmB;AAAA;;AAClC;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBJ,QAAQ,CAAS,GAAT,CAApC;AACA,QAAM,CAACK,KAAD,IAAUL,QAAQ,CAAS,GAAT,CAAxB;AACA,QAAM,CAACM,SAAD,IAAcN,QAAQ,CAAS,CAAT,CAA5B;AACA,QAAM,CAACO,mBAAD,IAAwBP,QAAQ,CAAS,CAAT,CAAtC;AACA,QAAM,CAACQ,oBAAD,IAAyBR,QAAQ,CAAS,CAAT,CAAvC,CANkC,CASlC;;AACA,QAAMS,gBAAgB,GAAG,MAAK;AAC1BC,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACH,GAFD;;AAGAV,EAAAA,SAAS,CAACQ,gBAAD,EAAmB,EAAnB,CAAT,CAbkC,CAaH;AAG/B;AACI;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AAAA;AACI;AACA;AAAA,8BACI;AAAA,+BAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAH;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA,gCAII;AAAQ,UAAA,OAAO,EAAE,MAAML,SAAS,CAACQ,IAAI,CAACC,MAAL,EAAD,CAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJJ,eAKI;AAAA,kEAAqBV,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA,gBALJ,eAMI;AAAA,iEAAoBE,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA,gBANJ,eAOI;AAAA,kEAA0BA,KAAK,GAAGF,MAAlC;AAAA;AAAA;AAAA;AAAA;AAAA,gBAPJ,eAQI;AAAA,8DAAsBG,SAAtB;AAAA;AAAA;AAAA;AAAA;AAAA,gBARJ,eASI;AAAA,4EAAoCC,mBAApC;AAAA;AAAA;AAAA;AAAA;AAAA,gBATJ,eAUI;AAAA,6EAAqCC,oBAArC;AAAA;AAAA;AAAA;AAAA;AAAA,gBAVJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAFJ;AAmBH,CAjDD;;GAAMN,U;;KAAAA,U;AAkDN,eAAeA,UAAf","sourcesContent":["import React, { FC, useState } from \"react\"\r\nimport { useEffect } from \"react\";\r\n//把整个css文件引入过来，当作一个style（相当于dom）        import \"./index.css\"\r\n/* JS中的import 代替了HTML中的<link rel=\"stylesheet\" href=\"styles.css\"></link> */\r\n//因为import './index.css'会导致全局样式的样式冲突问题，为了避免，所以使用module.css\r\n//原理：为每一个css都创建一个随机字符串来保证class的唯一性\r\n\r\n\r\n//1.在一个element下面，\r\n    // 每一个attribute都占用一个代码块，\r\n    // =左右两边不需要空格，\r\n    // attributes之间不需要逗号\r\n\r\n/**2.REACT JS中CSS的写法用两个大括号来写\r\n * 子的attribute每个占用一行\r\n * key: value的形式，左边有空格，右边有空格\r\n * 子的attributes之间用逗号\r\n */\r\n\r\n\r\n// let nectar:number = 100;\r\n// let honey:number = 100;\r\n// let amountBee:number = 9;\r\n// let amountFuelOverSixty = 4;\r\n// let amountStateOverSixty = 3;\r\n\r\n\r\n// 好的页面结构：\r\n// 1.在Statistics function之前可以写定义好的常量\r\n// 2.在Statistics代码块里面\r\n//     1.写useState方法来定义变量\r\n//     2.定义API\r\n//     3.写好useEffect定义好监听函数\r\n//     4.写return里面的div\r\n\r\nconst Statistics = (): JSX.Element => {\r\n    //\r\n    const [nectar, setNectar] = useState<number>(100)\r\n    const [honey] = useState<number>(100)\r\n    const [amountBee] = useState<number>(9)\r\n    const [amountFuelOverSixty] = useState<number>(4)\r\n    const [amountStateOverSixty] = useState<number>(3)\r\n\r\n\r\n    //evenlistner (本质是一个callback函数)\r\n    const runStatisticeAPI = () =>{\r\n        console.log(\"hello world\")\r\n    }\r\n    useEffect(runStatisticeAPI, [])//如果这个地方不传入参数的话，相当于页面初始化的时候执行，且仅执行一次\r\n\r\n\r\n    //什么时候统计的表单会刷新\r\n        //1.新增，修改，删除的时候，统计数据\r\n        //2.当打开页面的时候统计数据需要刷新-useEffect，监听参数为空\r\n    // useEffect(() => {\r\n    //     const fetch = () => {\r\n    //         //做请求\r\n    //         console.log(\"请求数据\")\r\n    //     }\r\n    //     fetch();\r\n    // }, [])\r\n\r\n\r\n\r\n\r\n    return (\r\n        //JSX Element里面声明变量必须用一层大括号给包裹起来，对于object，Ts的语法依然是一层大括号，里面的元素用逗号分隔\r\n        <div>\r\n            <p><b>Statistics</b></p>\r\n            <ul>\r\n                {/* 1.这个地方需要传入一个函数的reference，而不是函数的调用\r\n                2.如果写成setNectar(Math.random())，相当于调用了这个函数\r\n                3.把这个函数调用再次封装到一个函数里面，就能解决这个问题 */}\r\n                <button onClick={() => setNectar(Math.random())}>点击</button>\r\n                <li>共收集蜂蜜, nectar = {nectar}</li>\r\n                <li>共生产蜂蜜, honey = {honey}</li>\r\n                <li>总转化率,tansformation = {honey / nectar}</li>\r\n                <li>蜜蜂数量,amountBee = {amountBee}</li>\r\n                <li>燃料大于60%, amountFuelOverSixty = {amountFuelOverSixty}</li>\r\n                <li>状态大于60%, amountStateOverSixty = {amountStateOverSixty}</li>\r\n            </ul>\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default Statistics;"]},"metadata":{},"sourceType":"module"}